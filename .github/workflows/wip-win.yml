name: _wip-win

on:
  workflow_dispatch:
  
env:
  PYTHON_VERSION: 3.7.5
  MACOSX_DEPLOYMENT_TARGET: 10.9
  HACKY_SCRIPT_REL_PATH: '.github/workflows/pyinstaller-hack.sh'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact: './dist/retype-hacky'
            name: windows
    steps:
      - uses: actions/checkout@v3
          
      - name: 1W. Setup Python ${{ env.PYTHON_VERSION }}
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v3
        with:
           python-version: ${{ env.PYTHON_VERSION }}
           
      - name: 2MW. Generate Python venv cache
        if: matrix.os == 'macos-latest' || matrix.os == 'windows-latest'
        id: python_venv_cache
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}-${{ matrix.os }}
          
      - name: 3W. Install dependencies unless cached
        if: matrix.os == 'windows-latest' && steps.python_venv_cache.outputs.cache-hit != 'true'
        run: |
           if [ -d "venv" ]; then rm -rf venv; fi
           python -m venv venv
           venv/Scripts/python -m pip install pyinstaller setuptools pywin32
           venv/Scripts/python -m pip install -r requirements.txt
        shell: bash
        
      - name: 4W. Apply PyInstaller hack
        if: matrix.os == 'windows-latest'
        uses: plu5/run-script-in-workflows-dir-action@main
        with:
          script: 'pyinstaller-hack.sh'
          args: 'apply venv/lib/site-packages'
