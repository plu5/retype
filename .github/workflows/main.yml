name: Build

on:
  workflow_dispatch:

jobs:
  linux-build:
    name: 'Linux'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
      
      - name: 1. Setup Python
        id: setup_python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: 2. Generate Python venv cache
        id: python_cache
        uses: actions/cache@v3
        with:
          path: venv
          key: pip-3.8-${{ hashFiles('requirements.txt') }}

      - name: 3. Install Python dependencies unless cached
        if: steps.python_cache.outputs.cache-hit != 'true'
        run: |
          # Check if venv exists (restored from secondary keys if any, and delete)
          if [ -d "venv" ]; then rm -rf venv; fi
          # Re-create the venv
          python3 -m venv venv
          # Upgrade pip
          venv/bin/python3 -m pip install --upgrade pip
          # Install dependencies
          venv/bin/python3 -m pip install pyinstaller setuptools
          venv/bin/python3 -m pip install -r requirements.txt
          venv/bin/python3 -m pip install staticx
          
      - name: 4. Run retype setup script
        run: |
          venv/bin/pyinstaller --path="$(pwd)" --clean --hiddenimport="PyQt5.QtWidgets" --name="retype" ./retype-target.py
          # venv/bin/python3 setup.py b -k onefile
          ls ./dist
          ls ./dist/retype
        
      - name: 5. Run StaticX
        run: venv/bin/staticx --loglevel DEBUG ./dist/retype/retype ./dist/retype/retype-static
        
      - name: 6. Upload the build artifacts
        uses: actions/upload-artifact@v3.0.0
        with:
          name: retype-1.0.0-linux
          path: ./dist/retype
          if-no-files-found: error
          retention-days: 1

#   macos-build:
#     name: 'macOS'
#     runs-on: 'macos-latest'
#     env:
#       PYTHON_VERSION: "3.7.4"
#       MACOSX_DEPLOYMENT_TARGET: "10.9"
#     steps:
#       - uses: actions/checkout@v3
      
#       - name: 1. Setup Python
#         uses: plu5/macos-setup-python-action@main
#         with:
#           version: ${{ env.PYTHON_VERSION }}
          
#       - name: 2. Generate Python venv cache
#         id: python_cache
#         uses: actions/cache@v3
#         with:
#           path: venv
#           key: pip-${{ env.PYTHON_VERSION }}-1-${{ hashFiles('requirements.txt') }}

#       - name: 3. Install dependencies unless cached
#         if: steps.python_cache.outputs.cache-hit != 'true'
#         run: |
#           # Check if venv exists (restored from secondary keys if any, and delete)
#           if [ -d "venv" ]; then rm -rf venv; fi
#           # Re-create the venv
#           python3 -m venv venv
#           # Install dependencies
#           PYINSTALLER_COMPILE_BOOTLOADER=1 venv/bin/python3 -m pip install pyinstaller setuptools
#           venv/bin/python3 -m pip install PyQt5==5.13.0 lxml==4.6.3 # Compatible down to macOS 10.9
#           venv/bin/python3 -m pip install -r requirements.txt
        
#       - name: 4. Run retype setup script
#         run: venv/bin/python3 setup.py b -k bundle
        
#       - name: 5. Make dmg
#         run: |
#           npm install -g appdmg
#           appdmg setup/appdmg-config.json retype.dmg

#       - name: 6. Upload the build artifacts
#         uses: actions/upload-artifact@v3.0.0
#         with:
#           name: retype-1.0.0-macos
#           path: ./retype.dmg
#           if-no-files-found: error
#           retention-days: 1

#   linux-build:
#     name: 'Linux'
#     runs-on: 'linux-latest'
#     steps:
#       - uses: actions/checkout@v3
      
#       - uses: docker/build-push-action@v2
#         with:
#           tags: test-image:latest
#           push: false
#           file: .github/workflows/Dockerfile
#           context: .

#       - uses: addnab/docker-run-action@v3
#         with:
#           image: test-image:latest
#           options: -v ${{ github.workspace }}/dist:/usr/src/retype/dist
#           run: |
#             cd /usr/src/retype
#             ls
#             venv/bin/python3.7 setup.py b -k onedir

#       - name: Upload the build artifacts
#         uses: actions/upload-artifact@v3.0.0
#         with:
#           name: retype-1.0.0-linux
#           path: ./dist/retype
#           if-no-files-found: error
#           retention-days: 1

#   windows-build:
#     name: 'Windows'
#     runs-on: 'windows-latest'
#     steps:
#       - uses: actions/checkout@v3

#       - name: 1. Setup Python
#         id: setup_python
#         uses: actions/setup-python@v3
#         with:
#           python-version: 3.7
          
#       - name: 2. Generate Python venv cache
#         id: python_cache
#         uses: actions/cache@v3
#         with:
#           path: venv
#           key: pip-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}

#       - name: 3. Install dependencies unless cached
#         if: steps.python_cache.outputs.cache-hit != 'true'
#         run: |
#           # Check if venv exists (restored from secondary keys if any, and delete)
#           if [ -d "venv" ]; then rm -rf venv; fi
#           # Re-create the venv
#           python -m venv venv
#           # Install dependencies
#           venv/Scripts/python -m pip install pyinstaller setuptools pywin32
#           venv/Scripts/python -m pip install -r requirements.txt
#         shell: bash
        
#       - uses: plu5/run-script-in-workflows-dir-action@main
#         with:
#           script: 'pyinstaller-hack.sh'
#           args: 'apply venv/lib/site-packages'
          
#       - name: 4. Run retype setup script
#         run: venv/Scripts/python setup.py b -k hacky

#       - name: 5. Upload the build artifacts
#         uses: actions/upload-artifact@v3.0.0
#         with:
#           name: retype-1.0.0-win
#           path: ./dist/retype-hacky
#           if-no-files-found: error
#           retention-days: 1

#   linux-build:
#     name: 'Linux'
#     runs-on: 'ubuntu-latest'
#     container: 
#       image: 'ubuntu:16.04'
#       options: --user 0
#     steps:
#       - uses: actions/checkout@v3
      
#       - name: 1. Generate cache
#         uses: actions/cache@v2
#         id: cache-id
#         with:
#           path: ${{ runner.temp }}/cache-directory
#           key: ${{ runner.os }}-cache-key-v2.0
      
#       - name: 2. Install Python or restore it from cache
#         uses: plu5/cache-anything-new-in-container-action@main
#         with:
#           script: 'ubuntu-setup-python.sh'
#           is_cached: ${{ steps.cache-id.outputs.cache-hit }}
#           cache: ${{ runner.temp }}/cache-directory
#           snapshot: '/'
#           exclude: '/boot /data /dev /mnt /proc /run /sys'

#       - name: 3. Run ldconfig (Python is unable to find its shared libraries otherwise)
#         run: |
#           ldconfig /usr/local/lib
#           python3.7 --version

#       - name: 4. Check if Python is fine
#         if: success() || failure()
#         run: python3.7 --version

#       # from rashidnhmâ€™s snippet @ https://github.com/actions/setup-python/issues/330
#       - name: 5. Generate Python venv cache
#         id: python_cache
#         uses: actions/cache@v3
#         with:
#           path: venv
#           key: pip-${{ hashFiles('requirements.txt') }}

#       - name: 6. Install dependencies unless cached
#         if: steps.python_cache.outputs.cache-hit != 'true'
#         run: |
#           # Check if venv exists (restored from secondary keys if any, and delete)
#           if [ -d "venv" ]; then rm -rf venv; fi
#           # Re-create the venv
#           python3.7 -m venv venv
#           # Upgrade pip
#           venv/bin/python3.7 -m pip install --upgrade pip
#           # Install dependencies
#           venv/bin/python3.7 -m pip install pyinstaller setuptools
#           venv/bin/python3.7 -m pip install -r requirements.txt

#       - uses: plu5/run-script-in-workflows-dir-action@main
#         with:
#           script: 'pyinstaller-hack.sh'
#           args: 'apply venv/lib/python3.7/site-packages'
      
#       - run: cat venv/lib/python3.7/site-packages/PyInstaller/loader/pyimod02_importers.py
          
#       - name: 7. Run retype setup script
#         run: venv/bin/python3.7 setup.py b -k hacky
        
#       - name: 8. Upload the build artifacts
#         uses: actions/upload-artifact@v3.0.0
#         with:
#           name: retype-1.0.0-linux
#           path: ./dist/retype-hacky
#           if-no-files-found: error
#           retention-days: 1
