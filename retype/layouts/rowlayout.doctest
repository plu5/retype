"""
python -m doctest rowlayout.doctest
"""
LeftToRightLayout
=================

Import RowLayout:

>>> import sys, os, random
>>> from rowlayout import RowLayout

Import things needed to create a simple test window

>>> from PyQt5.QtWidgets import QWidget, QVBoxLayout, QApplication, QPushButton
>>> from PyQt5.QtGui import QPixmap
>>> from PyQt5.QtCore import Qt

>>> class ExampleWindow(QWidget):
...     def __init__(self):
...         super().__init__()
...         self.setLayout(QVBoxLayout(self))
...         inner1 = QWidget()
...         inner2 = QWidget()
...         inner2.setLayout(RowLayout(inner2))
...         inner2.layout().setSpacing(0)
...         inner2.layout().setContentsMargins(0,0,0,0)
...         self.layout().addWidget(inner1, 1)
...         self.layout().addWidget(inner2)
...         inner2.setObjectName('testwidget')
...
...         for w in range( random.randint(25,50)):
...             words = " ".join(
...                 [ "".join([ chr(random.choice(range(ord('a'),ord('z'))))  
...                         for x in range( random.randint(2,9) ) ])  
...                             for n in range(random.randint(1,5)) ]).title()
...             widget = QPushButton(words)
...             inner2.layout().addWidget(widget)
...

For now just show the window

>>> app = QApplication(sys.argv)
>>> mainWin = ExampleWindow()
>>> mainWin.setGeometry(-900, 300, 800, 600)
>>> app.setStyleSheet("#testwidget {background-color: yellow;} QPushButton {border-style:dashed; border-color: red; border-width: 2px; font-size: 20px;}")
>>> mainWin.show()
>>> app.exec_()
0

todo: check contentsRect to make sure the margins are what they should be