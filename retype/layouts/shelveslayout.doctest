"""
py -3 -m doctest shelveslayout.doctest
"""
CentredFlowLayout
=================

Import CentredFlowWidget:

>>> import sys, os, random
>>> from shelveslayout import CentredFlowWidget

Import things needed to create a simple test window

>>> from PyQt5.QtWidgets import QWidget, QVBoxLayout, QApplication, QPushButton
>>> from PyQt5.QtGui import QPixmap
>>> from PyQt5.QtCore import Qt

>>> class ExampleWindow(QWidget):
...     def __init__(self):
...         super().__init__()
...         self.scroller = CentredFlowWidget(self)
...         #self.scroller.setStyleSheet()
...         self.setLayout(QVBoxLayout(self))
...         self.layout().addWidget(self.scroller)
...
...         self.layout().setSpacing(0)
...         self.layout().setContentsMargins(0,0,0,0)
...
...         for w in range( random.randint(25,50)):
...           #  words = " ".join(
...           #      [ "".join([ chr(random.choice(range(ord('a'),ord('z'))))  
...           #              for x in range( random.randint(2,9) ) ])  
...           #                  for n in range(random.randint(1,5)) ]).title()
...             words = "ugh"
...             widget = QPushButton(words)
...          #   widget.setMinimumSize(140, 140)
...             self.scroller.addWidget(widget)
...

For now just show the window

>>> app = QApplication(sys.argv)
>>> mainWin = ExampleWindow()
>>> #mainWin.scroller.setContentsMargins(10, 20, 30, 40)
>>> mainWin.scroller.setContentsMargins(0, 0, 0, 0)
>>> mainWin.setGeometry(-900, 300, 800, 600)
>>> # app.setStyleSheet("QPushButton {border-style:dashed; border-color: red; border-width: 2px;}")
>>> mainWin.show()
>>> sys.exit(app.exec_())

todo: check contentsRect to make sure the margins are what they should be